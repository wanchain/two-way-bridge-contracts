#include "imports/signature/sig-header.fc";

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }
    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
    if (op == OP_SIG_Verify) {
        int s = in_msg_body~load_uint(256);
        int gpk_x = in_msg_body~load_uint(256);
        int gpk_y = in_msg_body~load_uint(256);
        slice extra_slice = in_msg_body.preload_ref().begin_parse();
        int e = extra_slice~load_uint(256);
        int p = extra_slice~load_uint(256);
        int msg = extra_slice~load_uint(256);
        int verifyRet = verify_sec(s, gpk_x, gpk_y, e, p, msg);
        throw_unless(0xffed, verifyRet == -1); ;;todo add error_ennum
        return ();
    }
    if (op == OP_SIG_VerifyEcdsa) {

        int s = in_msg_body~load_uint(256);
        int gpk_x = in_msg_body~load_uint(256);
        int gpk_y = in_msg_body~load_uint(256);
        slice extra_slice = in_msg_body.preload_ref().begin_parse();
        int e = extra_slice~load_uint(256);
        int p = extra_slice~load_uint(256);
        int msg = extra_slice~load_uint(256);


        int verifyRet = verify_ecdsa(s, gpk_x, gpk_y, e, p, msg);
        ;;throw(0xffee); ;;todo should delete
        throw_unless(0xffed, verifyRet == -1); ;;todo add error_ennum
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}
