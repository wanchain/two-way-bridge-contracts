#include "imports/std/stdlib.fc";
#include "imports/common/opcode.fc";
#include "imports/util/slice.fc";
#include "imports/crypto/secp256k1.fc";
#include "imports/common/wkchain.fc";
#include "imports/common/errcode.fc";


;; load_data populates storage variables using stored data
(slice, slice, int, int, cell, cell, cell, cell) load_data() impure {
    ~dump(11);
    var ds = get_data().begin_parse();
    ~dump(12);
    (slice cross_owner, slice cross_admin) = (ds~load_msg_addr(), ds~load_msg_addr());
    ~dump(13);
    (int halt, int init) = (ds~load_uint(2), ds~load_uint(2));
    (cell ca_fee, cell oracle, cell token_manager, cell extend) = (ds~load_ref(), ds~load_ref(), ds~load_ref(), ds~load_ref());
    ds.end_parse();
    return (cross_owner, cross_admin, halt, init, ca_fee, oracle, token_manager, extend);
}

;; save_data stores storage variables as a cell into persistent storage
() save_data(slice cross_owner, slice cross_admin, int halt, int init, cell ca_fee, cell oracle, cell token_manager, cell extend) impure {
    set_data(
        begin_cell()
            .store_slice(cross_owner)
            .store_slice(cross_admin)
            .store_uint(halt, 2)
            .store_uint(init, 2)
            .store_ref(ca_fee)
            .store_ref(oracle)
            .store_ref(token_manager)
            .store_ref(extend)
            .end_cell()
    );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee

    ;;todo should check the rights

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    ~dump(1);

    (slice cross_owner, slice cross_admin, int halt, int init, cell ca_fee, cell oracle, cell token_manager, cell extend) = load_data();
    ~dump(2);
    if (op == op::addAdmin) {
        ;;int addr_wkid = in_msg_body~load_uint(32);
        ;;int addr_hash = in_msg_body~load_uint(256);

        slice cross_admin_new = in_msg_body~load_msg_addr();
        ~dump(cross_admin_new);
        tuple cross_admin_new_t = parse_addr(cross_admin_new);
        ~dump(cross_admin_new_t);
        ~dump(3);
        ;; get wkid from parsed address
        {-if (addr_wkid != WORKING_CHAINID) {
            throw(ERROR::INVALID_WKID);
        }-}
        ;;todo how to write bits from randome position and random length?
        ;;todo where does the ton coin of this contract store?
        save_data(cross_owner, cross_admin_new, halt, init, ca_fee, oracle, token_manager, token_manager);
        return ();
    }

    if (op == op::setFee) {

        (int _src_chain_id, int _dst_chain_id, int _contract_fee, int _agent_fee) = (in_msg_body~load_uint(32), in_msg_body~load_uint(32), in_msg_body~load_uint(32), in_msg_body~load_uint(32));

        slice ca_fee_slice = ca_fee.begin_parse();
        (slice smgFeeProxyAddr, cell ca_dic) = (ca_fee_slice~load_msg_addr(), ca_fee_slice~load_dict());

        ;;todo change key is exist
        ;; (cell, int) udict_add?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTUADD";
        ;; (cell, int) idict_add?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTIADD";
        slice key = begin_cell().store_uint(_src_chain_id, 32).store_uint(_dst_chain_id, 32).end_cell().begin_parse();
        int key_int = slice_to_int(key, 64);
        slice value = begin_cell().store_uint(_contract_fee, 32).store_uint(_agent_fee, 32).end_cell().begin_parse();
        (cell ca_dic_new, int ret) = udict_add?(ca_dic, 64, key_int, value);

        ~strdump("setFee2");
        ~dump(ca_dic_new);
        ~dump(ret);

        cell ca_fee_new = begin_cell()
            .store_slice(smgFeeProxyAddr)
            .store_dict(ca_dic_new)
            .end_cell();
        ;;todo check ret
        ~strdump("setFee3");
        save_data(cross_owner, cross_admin, halt, init, ca_fee_new, oracle, token_manager, token_manager);
        return ();
    }

    if (op == op::addTokenPair) {
        ;;todo how to load string? load_slice?
        (int _token_pair_id, int _src_chain_id, int _dst_chain_id, int _from_account_len) =
        (in_msg_body~load_uint(32), in_msg_body~load_uint(32), in_msg_body~load_uint(32), in_msg_body~load_uint(8));
        slice _from_account = in_msg_body~load_bits(8 * _from_account_len);

        int _to_account_len = in_msg_body~load_uint(8);
        slice _to_account = in_msg_body~load_bits(8 * _to_account_len);

        ~strdump("addTokenPair _from_account");
        ~dump(_from_account_len);
        ~dump(slice_refs(_from_account));
        ~dump(slice_bits(_from_account));

        ~strdump("addTokenPair _to_account");
        ~dump(_to_account_len);
        ~dump(slice_refs(_to_account));
        ~dump(slice_bits(_to_account));

        slice tm_slice = token_manager.begin_parse();
        (cell tm_dic, cell wt_dic) = (tm_slice~load_dict(), tm_slice~load_dict());

        ;;todo change key is exist

        ;; cell udict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) "DICTUSETREF";
        ;; (cell, ()) ~udict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) "DICTUSETREF";

        int key_int = _token_pair_id;
        cell value = begin_cell()
            .store_uint(_src_chain_id, 32)
            .store_uint(_dst_chain_id, 32)
            .store_uint(_from_account_len, 8)
            .store_slice(_from_account)
            .store_uint(_to_account_len, 8)
            .store_slice(_to_account)
            .end_cell();
        ~strdump("addTokenPair value");
        ~dump(slice_refs(value.begin_parse()));
        ~dump(slice_bits(value.begin_parse()));
        ~strdump("addTokenPair value end");

        cell dic_new = udict_set_ref(tm_dic, 32, key_int, value);

        ~strdump("addTokenPair2");
        ~dump(dic_new);
        ~dump(slice_refs(dic_new.begin_parse()));
        ~dump(slice_bits(dic_new.begin_parse()));

        cell token_manager_new = begin_cell()
            .store_dict(dic_new)
            .store_dict(wt_dic)
            .end_cell();
        ;;todo check ret
        ~strdump("addTokenPair3");
        save_data(cross_owner, cross_admin, halt, init, ca_fee, oracle, token_manager_new, extend);
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

(slice, slice, int, int) get_cross_config() method_id {
    (slice cross_owner, slice cross_admin, int halt, int init, cell ca_fee, cell oracle, cell token_manager, cell extend) = load_data();
    return (cross_owner, cross_admin, halt, init);
}

(int, int) get_fee(int _src_chain_id, int _dst_chain_id) method_id {
    ~strdump("get_fee");
    (slice cross_owner, slice cross_admin, int halt, int init, cell ca_fee, cell oracle, cell token_manager, cell extend) = load_data();
    ~strdump("get_fee_1");
    ;;todo load smgFeeProxy first
    slice ca_fee_slice = ca_fee.begin_parse();
    (_, cell dict) = (ca_fee_slice~load_msg_addr(), ca_fee_slice~load_dict());
    ~strdump("get_fee_2");
    slice key = begin_cell().store_uint(_src_chain_id, 32).store_uint(_dst_chain_id, 32).end_cell().begin_parse();
    int key_int = slice_to_int(key, 64);
    (slice cs, int ret) = udict_get?(dict, 64, key_int);
    if (ret) {
        ~strdump("get_fee_3");
        return (cs~load_uint(32), cs~load_uint(32));
    }
    ~strdump("get_fee_4");
    return (0, 0);
}

(int, int, slice, slice) get_token_pair(int _token_paird_id) method_id {
    ~strdump("get_token_pair");
    (slice cross_owner, slice cross_admin, int halt, int init, cell ca_fee, cell oracle, cell token_manager, cell extend) = load_data();
    ~strdump("get_token_pair_1");
    slice tm_slice = token_manager.begin_parse();
    ~strdump("get_token_pair_11");
    (cell tm_dic, cell wt_dic) = (tm_slice~load_dict(), tm_slice~load_dict());
    ~strdump("get_token_pair_12");
    slice from_account = begin_cell().end_cell().begin_parse();
    slice to_account = begin_cell().end_cell().begin_parse();
    ~strdump("get_token_pair_13");
    (cell dic_new, int ret) = udict_get_ref?(tm_dic, 32, _token_paird_id);
    if (cell_null?(dic_new)) {
        ~strdump("get_token_pair_14");
        return (0, 0, from_account, to_account);
    }
    slice cs = dic_new.begin_parse();
    ~strdump("get_token_pair_15");
    if (ret) {
        ~strdump("get_token_pair_16");
        ~dump(slice_refs(cs));
        ~dump(slice_bits(cs));
        (int _src_chain_id, int _dst_chain_id, int _from_account_len) =
        (cs~load_uint(32), cs~load_uint(32), cs~load_uint(8));
        ~strdump("_from_account_len");
        ~dump(_from_account_len);


        slice _from_account = cs~load_bits(8 * _from_account_len);
        int _to_account_len = cs~load_uint(8);
        slice _to_account = cs~load_bits(8 * _to_account_len);

        ~strdump("_to_account_len");
        ~dump(_to_account_len);
        return (_src_chain_id, _dst_chain_id, _from_account, _to_account);
    }
    ~strdump("get_token_pair_17");
    return (0, 0, from_account, to_account);
}