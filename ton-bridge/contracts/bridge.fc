#include "imports/std/stdlib.fc";
#include "imports/common/opcode.fc";
#include "imports/util/slice.fc";
#include "imports/crypto/secp256k1.fc";
#include "imports/common/wkchain.fc";
#include "imports/common/errcode.fc";
#include "jetton/messages.func";
#include "jetton/op-codes.func";


;; load_data populates storage variables using stored data
(slice, slice, int, int, cell, cell, cell, cell) load_data() impure {
    var ds = get_data().begin_parse();
    (slice cross_owner, slice cross_admin) = (ds~load_msg_addr(), ds~load_msg_addr());  ;;todo  change cross_admin to map type.
    (int halt, int init) = (ds~load_uint(2), ds~load_uint(2));
    (cell ca_fee, cell oracle, cell token_manager, cell extend) = (ds~load_ref(), ds~load_ref(), ds~load_ref(), ds~load_ref());
    ds.end_parse();
    return (cross_owner, cross_admin, halt, init, ca_fee, oracle, token_manager, extend);
}

;; save_data stores storage variables as a cell into persistent storage
() save_data(slice cross_owner, slice cross_admin, int halt, int init, cell ca_fee, cell oracle, cell token_manager, cell extend) impure {
    set_data(
        begin_cell()
            .store_slice(cross_owner)
            .store_slice(cross_admin)
            .store_uint(halt, 2)
            .store_uint(init, 2)
            .store_ref(ca_fee)
            .store_ref(oracle)
            .store_ref(token_manager)
            .store_ref(extend)
            .end_cell()
    );
}

() smgRelease_ton(int _queryId, int _uniqId, int _smgId, int _token_pair_id, int _release_value,
int _fee, slice _token_account, slice _user_account, int _r, int _p, int _s,
slice _jetton_admin_addr, slice _jetton_wallet_bridge_addr) impure {
    {--
    1. bridge send normal internal message to _user_account
    2. how to handle _qureyId in normal transaction.
    -}
    var msg = begin_cell()
        .store_msg_flag(msg_flag::bounceable)
        .store_slice(_user_account)
        .store_coins(_release_value) ;;todo handle fee
        .store_msgbody_prefix_slice();
    send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS); ;; revert on errors
    ;;todo delete begin
    ;;throw(0x111);  ;; rollback ton to bridge if error occurs.
    ;;todo delete end
    return ();
}

() smgRelease_org_jetton(int _queryId, int _uniqId, int _smgId, int _token_pair_id, int _release_value,
int _fee, slice _token_account, slice _user_account, int _r, int _p, int _s,
slice _jetton_admin_addr, slice _jetton_wallet_bridge_addr) impure {
    {--
    1. bridge send inter_transfer to JW_bridge address
    -}
    int forward_ton_amount = 2;                         ;;todo get from input message
    int total_ton_amount = 200000000;                   ;;todo get from input message
    cell mint_request = begin_cell()
        .store_op(op::transfer).store_query_id(_queryId)
        .store_coins(_release_value).store_slice(_user_account)
        .store_slice(my_address())                  ;; todo check response address
        .store_maybe_ref(begin_cell().end_cell())   ;; customPayload
        .store_coins(forward_ton_amount)            ;; forward_amount, 4 bit if zero
        .store_maybe_ref(begin_cell().end_cell())   ;; forwardPayload
        .end_cell();

    var msg = begin_cell()
        .store_msg_flag(msg_flag::bounceable)
    ;;.store_slice(my_address()) ;;todo check again , think it over.
        .store_slice(_jetton_wallet_bridge_addr)
        .store_coins(total_ton_amount)
        .store_msgbody_prefix_ref(mint_request);
    ;;.store_msgbody_prefix_ref(begin_cell().end_cell()); ;;todo use the real mint request
    ;;.store_msgbody_prefix_slice();
    send_raw_message(msg.end_cell(), PAY_FEES_SEPARATELY); ;; revert on errors
    return ();
}

() smgRelease_wrapped_jetton(int _queryId, int _uniqId, int _smgId, int _token_pair_id, int _release_value,
int _fee, slice _token_account, slice _user_account, int _r, int _p, int _s,
slice _jetton_admin_addr, slice _jetton_wallet_bridge_addr) impure {
    {--
    1. bridge send mint message to _token_account
    -}
    int forward_ton_amount = 4000000;                         ;;todo get from input message
    int total_ton_amount = 5000000;                   ;;todo get from input message
    int total_ton_fee = 100000000;                   ;;todo get from input message
    int fwd_ton_fee = 50000000;                   ;;todo get from input message
    cell mint_request = begin_cell()
        .store_op(op::mint).store_query_id(_queryId)
        .store_slice(_user_account)
        .store_coins(_release_value)
        .store_coins(forward_ton_amount)
        .store_coins(total_ton_amount)
        .end_cell();

    {- var msg = begin_cell()
         .store_msg_flag(msg_flag::bounceable)
         .store_slice(my_address()) ;; sender todo why jetton-minter need this field, but op::transfer not need?
         .store_slice(_token_account)   ;; dst
         .store_coins(total_ton_amount) ;; value
         .store_int(0,1) ;; extracurrency collection
         .store_coins(0) ;; ihr_fee
         .store_coins(total_ton_fee) ;; fwd_fee
         .store_msgbody_prefix_ref(mint_request);-}

    ;;tuple tup_token_accout = parse_addr(_token_account);
    tuple tup_user_accout = parse_addr(_user_account);


    var msg = begin_cell()
        .store_uint(0, 1) ;; tag
        .store_uint(1, 1) ;; ihr_disabled
        .store_uint(1, 1) ;; allow bounces
        .store_uint(0, 1) ;; not bounced itself
        .store_slice(my_address())  ;; src
        .store_slice(_token_account) ;; dst
    ;;.store_slice(_user_account) ;; dst
        .store_coins(total_ton_fee)  ;; value
        .store_uint(0, 1) ;;
        .store_coins(0) ;; ihr_fee
        .store_coins(fwd_ton_fee) ;; fwd_fee
        .store_uint(cur_lt(), 64) ;; lt of transaction
        .store_uint(now(), 32) ;; unixtime of transaction
        .store_uint(0, 1) ;; no init-field flag (Maybe)
        .store_uint(1, 1) ;;
        .store_ref(mint_request);

    {-var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(_user_account)
        .store_coins(total_ton_fee)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_slice(begin_cell().end_cell().begin_parse());-}

    send_raw_message(msg.end_cell(), PAY_FEES_SEPARATELY); ;; revert on errors
    return ();
}

() userLock_ton(int _queryId, int _smgId, int _token_pair_id, int _lock_value, int _fee, slice _token_account, slice _user_account) impure {
    return ();
}

() userLock_org_jetton(int _queryId, int _smgId, int _token_pair_id, int _lock_value, int _fee, slice _token_account, slice _user_account) impure {
    return ();
}

() userLock_wrapped_jetton(int _queryId, int _smgId, int _token_pair_id, int _lock_value, int _fee, slice _token_account, slice _user_account) impure {
    return ();
}


(int, int, slice, slice) get_token_pair(int _token_paird_id) method_id {
    (slice cross_owner, slice cross_admin, int halt, int init, cell ca_fee, cell oracle, cell token_manager, cell extend) = load_data();
    slice tm_slice = token_manager.begin_parse();
    (cell tm_dic, cell wt_dic) = (tm_slice~load_dict(), tm_slice~load_dict());
    slice from_account = begin_cell().end_cell().begin_parse();
    slice to_account = begin_cell().end_cell().begin_parse();
    (cell dic_new, int ret) = udict_get_ref?(tm_dic, 32, _token_paird_id);
    if (cell_null?(dic_new)) {
        return (0, 0, from_account, to_account);
    }
    slice cs = dic_new.begin_parse();
    if (ret) {
        (int _src_chain_id, int _dst_chain_id, int _from_account_len) =
        (cs~load_uint(32), cs~load_uint(32), cs~load_uint(8));


        slice _from_account = cs~load_bits(8 * _from_account_len);
        int _to_account_len = cs~load_uint(8);
        slice _to_account = cs~load_bits(8 * _to_account_len);

        return (_src_chain_id, _dst_chain_id, _from_account, _to_account);
    }
    return (0, 0, from_account, to_account);
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee

    ;;todo should check the rights

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int queryId = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case


    (slice cross_owner, slice cross_admin, int halt, int init, cell ca_fee, cell oracle, cell token_manager, cell extend) = load_data();
    if (op == op::addAdmin) {
        ;;int addr_wkid = in_msg_body~load_uint(32);
        ;;int addr_hash = in_msg_body~load_uint(256);

        slice cross_admin_new = in_msg_body~load_msg_addr();
        tuple cross_admin_new_t = parse_addr(cross_admin_new);
        ;; get wkid from parsed address
        {-if (addr_wkid != WORKING_CHAINID) {
            throw(ERROR::INVALID_WKID);
        }-}
        ;;todo how to write bits from randome position and random length?
        ;;todo where does the ton coin of this contract store?
        save_data(cross_owner, cross_admin_new, halt, init, ca_fee, oracle, token_manager, token_manager);
        return ();
    }

    if (op == op::setFee) {

        (int _src_chain_id, int _dst_chain_id, int _contract_fee, int _agent_fee) = (in_msg_body~load_uint(32), in_msg_body~load_uint(32), in_msg_body~load_uint(32), in_msg_body~load_uint(32));

        slice ca_fee_slice = ca_fee.begin_parse();
        (slice smgFeeProxyAddr, cell ca_dic) = (ca_fee_slice~load_msg_addr(), ca_fee_slice~load_dict());

        ;;todo change key is exist
        ;; (cell, int) udict_add?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTUADD";
        ;; (cell, int) idict_add?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTIADD";
        slice key = begin_cell().store_uint(_src_chain_id, 32).store_uint(_dst_chain_id, 32).end_cell().begin_parse();
        int key_int = slice_to_int(key, 64);
        slice value = begin_cell().store_uint(_contract_fee, 32).store_uint(_agent_fee, 32).end_cell().begin_parse();
        (cell ca_dic_new, int ret) = udict_add?(ca_dic, 64, key_int, value);


        cell ca_fee_new = begin_cell()
            .store_slice(smgFeeProxyAddr)
            .store_dict(ca_dic_new)
            .end_cell();
        ;;todo check ret
        save_data(cross_owner, cross_admin, halt, init, ca_fee_new, oracle, token_manager, token_manager);
        return ();
    }

    if (op == op::setSmgFeeProxy) {

        (slice _smgFeeProxyAddr) = in_msg_body~load_msg_addr();

        slice ca_fee_slice = ca_fee.begin_parse();
        (slice oldSmgFeeProxyAddr, cell ca_dic) = (ca_fee_slice~load_msg_addr(), ca_fee_slice~load_dict());

        cell ca_fee_new = begin_cell()
            .store_slice(_smgFeeProxyAddr)
            .store_dict(ca_dic)
            .end_cell();
        ;;todo check ret
        save_data(cross_owner, cross_admin, halt, init, ca_fee_new, oracle, token_manager, token_manager);
        return ();
    }

    if (op == op::addTokenPair) {
        ;;todo how to load string? load_slice?
        (int _token_pair_id, int _src_chain_id, int _dst_chain_id, int _from_account_len) =
        (in_msg_body~load_uint(32), in_msg_body~load_uint(32), in_msg_body~load_uint(32), in_msg_body~load_uint(8));
        slice _from_account = in_msg_body~load_bits(8 * _from_account_len);

        int _to_account_len = in_msg_body~load_uint(8);
        slice _to_account = in_msg_body~load_bits(8 * _to_account_len);



        slice tm_slice = token_manager.begin_parse();
        (cell tm_dic, cell wt_dic) = (tm_slice~load_dict(), tm_slice~load_dict());

        ;;todo change key is exist

        ;; cell udict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) "DICTUSETREF";
        ;; (cell, ()) ~udict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) "DICTUSETREF";

        int key_int = _token_pair_id;
        cell value = begin_cell()
            .store_uint(_src_chain_id, 32)
            .store_uint(_dst_chain_id, 32)
            .store_uint(_from_account_len, 8)
            .store_slice(_from_account)
            .store_uint(_to_account_len, 8)
            .store_slice(_to_account)
            .end_cell();

        cell dic_new = udict_set_ref(tm_dic, 32, key_int, value);


        cell token_manager_new = begin_cell()
            .store_dict(dic_new)
            .store_dict(wt_dic)
            .end_cell();
        ;;todo check ret
        save_data(cross_owner, cross_admin, halt, init, ca_fee, oracle, token_manager_new, extend);
        return ();
    }
    slice ZERO_ACCOUNT = begin_cell().store_int(0, 160).end_cell().begin_parse();

    if (op == op::userLock) {
        throw(0x01); ;; todo should delete
        return ();   ;; todo should delete


        (int _smgId, int _token_pair_id, int _cross_value, slice _user_account) =
        (in_msg_body~load_uint(256), in_msg_body~load_uint(32), in_msg_body~load_uint(256), in_msg_body~load_msg_addr());


        (int _src_chainId, int _dst_chainId, slice _from_account, slice _dst_account) = get_token_pair(_token_pair_id);

        slice _token_account = begin_cell().end_cell().begin_parse();
        if (_src_chainId == BIP44_CHAINID) {
            _token_account = _from_account;
        } else {
            if (_dst_chainId == BIP44_CHAINID) {
                _token_account = _dst_account;
            } else {
                ;;todo throw error
            }
        }

        int _fee = 0;
        ;; todo get _fee from the input message?

        if (equal_slices(_token_account, ZERO_ACCOUNT)) {
            ;; coin
            ;; user lock has not fee parameter, but user_burn has this parameter
            userLock_ton(queryId, _smgId, _token_pair_id, _cross_value, _fee, _token_account, _user_account);
        } else {
            ;; myaddress == jetton_admin_addr
            ;; todo get jetton_admin_addr from jetton_admin
            if (-1) {
                userLock_org_jetton(queryId, _smgId, _token_pair_id, _cross_value, _fee, _token_account, _user_account);
            } else {
                userLock_wrapped_jetton(queryId, _smgId, _token_pair_id, _cross_value, _fee, _token_account, _user_account);
            }
        }

        ;; todo should delete begin
        userLock_ton(queryId, _smgId, _token_pair_id, _cross_value, _fee, _token_account, _user_account);
        userLock_org_jetton(queryId, _smgId, _token_pair_id, _cross_value, _fee, _token_account, _user_account);
        userLock_wrapped_jetton(queryId, _smgId, _token_pair_id, _cross_value, _fee, _token_account, _user_account);
        ;; todo should delete end
        return ();
    }

    if (op == op::smgRelease) {

        (int _uniqId,
            int _smgId,
            int _token_pair_id,
            int _release_value) =
        (in_msg_body~load_uint(256),
            in_msg_body~load_uint(256),
            in_msg_body~load_uint(32),
            in_msg_body~load_uint(256));

        slice part1 = in_msg_body~load_ref().begin_parse();
        (int _fee,
            slice _token_account,
            slice _user_account) =
        (part1~load_uint(256),
            part1~load_msg_addr(),
            part1~load_msg_addr());
        part1.end_parse();

        slice part2 = in_msg_body~load_ref().begin_parse();
        (
            int _r,
            int _p,
            int _s) =
        (
            part2~load_uint(256),
            part2~load_uint(256),
            part2~load_uint(256));
        part2.end_parse();

        slice part3 = in_msg_body~load_ref().begin_parse();
        (
            slice _jetton_admin_addr,
            slice _jetton_wallet_bridge_addr) =
        (
            part3~load_msg_addr(),
            part3~load_msg_addr());
        part3.end_parse();



        ;;todo check tokenaccount == ZERO?  coin
        ;;todo check admin of the tokenaccount == this.address? wrapped token
        ;;todo else JettonToken

        ;;todo get gpkInfo
        ;;todo compute sumhash
        ;;todo check signature
        ;;todo check the fee
        {--
            1. coin => normal transfer coin
            2. wrapped token => smgMint
            3. Jetton token => send transfer message to JW_BRIDGE contract.
        -}

        (int _src_chainId, int _dst_chainId, slice _from_account, slice _dst_account) = get_token_pair(_token_pair_id);

        slice _token_account_from_tk = begin_cell().end_cell().begin_parse();
        if (_src_chainId == BIP44_CHAINID) {
            _token_account_from_tk = _from_account;
        } else {
            if (_dst_chainId == BIP44_CHAINID) {
                _token_account_from_tk = _dst_account;
            } else {
                ;;todo throw error
            }
        }
        ;; todo why _token_account_from_tk is not same as the one from parameter?

        if (equal_slices(_token_account, ZERO_ACCOUNT)) {
            ;; coin
            ;; user lock has not fee parameter, but user_burn has this parameter
            smgRelease_ton(queryId, _uniqId, _smgId, _token_pair_id, _release_value, _fee, _token_account, _user_account, _r, _p, _s, _jetton_admin_addr, _jetton_wallet_bridge_addr);
        } else {
            ;; todo get jetton_admin_addr from jetton_admin
            if (equal_slices(_jetton_admin_addr, my_address())) {
                smgRelease_wrapped_jetton(queryId, _uniqId, _smgId, _token_pair_id, _release_value, _fee, _token_account, _user_account, _r, _p, _s, _jetton_admin_addr, _jetton_wallet_bridge_addr);
            } else {
                smgRelease_org_jetton(queryId, _uniqId, _smgId, _token_pair_id, _release_value, _fee, _token_account, _user_account, _r, _p, _s, _jetton_admin_addr, _jetton_wallet_bridge_addr);
            }
        }
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

(slice, slice, int, int) get_cross_config() method_id {
    (slice cross_owner, slice cross_admin, int halt, int init, cell ca_fee, cell oracle, cell token_manager, cell extend) = load_data();
    return (cross_owner, cross_admin, halt, init);
}

(int, int) get_fee(int _src_chain_id, int _dst_chain_id) method_id {
    (slice cross_owner, slice cross_admin, int halt, int init, cell ca_fee, cell oracle, cell token_manager, cell extend) = load_data();
    ;;todo load smgFeeProxy first
    slice ca_fee_slice = ca_fee.begin_parse();
    (_, cell dict) = (ca_fee_slice~load_msg_addr(), ca_fee_slice~load_dict());
    slice key = begin_cell().store_uint(_src_chain_id, 32).store_uint(_dst_chain_id, 32).end_cell().begin_parse();
    int key_int = slice_to_int(key, 64);
    (slice cs, int ret) = udict_get?(dict, 64, key_int);
    if (ret) {
        return (cs~load_uint(32), cs~load_uint(32));
    }
    return (0, 0);
}